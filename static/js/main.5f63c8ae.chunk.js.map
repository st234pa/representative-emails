{"version":3,"sources":["components/OfficialsList.tsx","components/Official.tsx","App.tsx","components/DismissableAlert.tsx","components/AddressLookup.tsx","components/CopyButton.tsx","serviceWorker.ts","index.tsx"],"names":["OfficialsList","props","officials","map","official","key","name","Form","Group","controlId","Check","type","label","emails","emailStringFromArray","office","href","officialString","onClick","handleClick","Official","emailString","i","substring","length","App","React","useState","apiError","setApiError","setOfficials","Map","emailsToCopy","setEmailsToCopy","showAlert","setShowAlert","handleDismissAlert","className","Container","Row","Col","lg","target","rel","input","setInput","md","FormControl","error","placeholder","aria-label","aria-describedby","onChange","evt","value","onKeyDown","preventDefault","handleSubmit","Control","Feedback","Button","block","variant","AddressLookup","address","fetch","then","response","json","data","officesData","officialsData","forEach","officialIndices","officialIndex","results","filter","result","show","handleClose","Alert","onClose","dismissible","Heading","stringToCopy","navigator","clipboard","writeText","CopyButton","emailStringFromMap","isSelected","get","newEmailsToCopy","set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5f63c8ae.chunk.js","sourcesContent":["import React from 'react';\nimport { OfficialInformation, OfficialCallback } from '../App';\nimport Official from './Official';\ntype OfficialsListProps = {\n  officials: OfficialInformation[];\n  handleClick: OfficialCallback;\n};\n\nexport default function OfficialsList(props: OfficialsListProps) {\n  return (\n    <ul>\n      {props.officials.map((official: OfficialInformation) => (\n        <li key={official.name}>\n          {Official({ official: official, handleClick: props.handleClick })}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import React from 'react';\nimport {\n  OfficialInformation,\n  OfficialCallback,\n  emailStringFromArray,\n} from '../App';\nimport Form from 'react-bootstrap/Form';\n\ntype OfficialProps = {\n  official: OfficialInformation;\n  handleClick: OfficialCallback;\n};\n\nexport default function Official(props: OfficialProps) {\n  function officialString(official: OfficialInformation) {\n    const emails: string = emailStringFromArray(official.emails);\n    return (\n      <span>\n        {official.name} ({official.office}):{' '}\n        <a href={'mailto:' + emails}>{emails}</a>\n      </span>\n    );\n  }\n  function handleClick() {\n    props.handleClick(props.official);\n  }\n  return (\n    <Form.Group controlId=\"formBasicCheckbox\">\n      <Form.Check\n        type=\"checkbox\"\n        label={officialString(props.official)}\n        onClick={handleClick}\n      />\n    </Form.Group>\n  );\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport AddressLookup from './components/AddressLookup';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport OfficialsList from './components/OfficialsList';\nimport CopyButton from './components/CopyButton';\nimport DismissableAlert from './components/DismissableAlert';\n\nexport type OfficialInformation = {\n  name: string;\n  office: string;\n  emails: string[];\n};\n\nexport type AddressLookupCallback = {\n  (address: string): void;\n};\n\nexport type OfficialCallback = {\n  (official: OfficialInformation): void;\n};\n\nexport type DismissAlertCallback = {\n  (): void;\n};\n\nexport function emailStringFromArray(emails: string[]) {\n  let emailString = '';\n  for (let i in emails) {\n    emailString += emails[i] + ', ';\n  }\n  emailString = emailString.substring(0, emailString.length - 2);\n  return emailString;\n}\n\nexport default function App() {\n  const [apiError, setApiError] = React.useState<string>('');\n  const [officials, setOfficials] = React.useState<OfficialInformation[]>([]);\n  const [emailsToCopy, setEmailsToCopy] = React.useState<\n    Map<OfficialInformation, boolean>\n  >(new Map<OfficialInformation, boolean>());\n  const [showAlert, setShowAlert] = React.useState<boolean>(false);\n\n  function handleAddressLookup(address: string) {\n    fetch(\n      `https://www.googleapis.com/civicinfo/v2/representatives?address=${address}&key=AIzaSyDu5VBw2c0PyvyUGlUNEY7hsIQC55t4W_0`\n    )\n      .then((response) => response.json())\n      .then((data) => {\n        if ('error' in data) {\n          setApiError(data['error']['message']);\n        } else {\n          setApiError('');\n          const officesData: any[] = data['offices'];\n          let officialsData: any[] = data['officials'];\n          officesData.forEach((office: any) => {\n            const officialIndices: number[] = office.officialIndices;\n            officialIndices.forEach((officialIndex: number) => {\n              officialsData[officialIndex].office = office.name;\n            });\n          });\n\n          const results = officialsData\n            .filter((result: any) => 'emails' in result)\n            .map((result: any) => ({\n              name: result['name'],\n              emails: result['emails'],\n              office: result['office'],\n            }));\n          if (results.length === 0) {\n            setShowAlert(true);\n          } else {\n            setOfficials(results);\n          }\n        }\n      });\n  }\n\n  function handleDismissAlert() {\n    setShowAlert(false);\n  }\n\n  function handleClick(official: OfficialInformation) {\n    const isSelected = !emailsToCopy.get(official);\n    let newEmailsToCopy = new Map<OfficialInformation, boolean>();\n    emailsToCopy.forEach((value: boolean, key: OfficialInformation) => {\n      newEmailsToCopy.set(key, value);\n    });\n    newEmailsToCopy.set(official, isSelected);\n    setEmailsToCopy(newEmailsToCopy);\n  }\n\n  function emailStringFromMap() {\n    let emailString: string = '';\n    emailsToCopy.forEach((value: boolean, key: OfficialInformation) => {\n      emailString += value ? emailStringFromArray(key.emails) + ', ' : '';\n    });\n    return emailString;\n  }\n\n  return (\n    <div className=\"App\">\n      <Container>\n        <Row className=\"mt-3 mb-0 justify-content-md-center\">\n          <Col lg={8}>\n            <h1 className=\"text-center\">Representative Emails</h1>\n          </Col>\n        </Row>\n        <Row className=\"mt-0 mb-0 justify-content-md-center\">\n          <Col lg={8}>\n            <p className=\"mb-0 text-center\">\n              A tool to find your representatives and get their emails!\n            </p>\n            <p className=\"mb-0 text-center\">\n              Built using the Google Civic Information API.\n            </p>\n            <p className=\"mb-3 text-center\">\n              <small>&mdash; Stephanie Yoon</small>\n            </p>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col lg={8}>\n            <p className=\"text-center mb-3\">\n              <a\n                href=\"https://syoon123.github.io/etemplate\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                Need to make an email template?\n              </a>\n            </p>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col lg={8}>\n            {AddressLookup({\n              handleSubmit: handleAddressLookup,\n              handleDismissAlert: handleDismissAlert,\n              error: apiError,\n            })}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center mb-3\">\n          <Col lg={8}>\n            {DismissableAlert({\n              show: showAlert,\n              handleClose: handleDismissAlert,\n            })}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center mb-3\">\n          <Col lg={8}>\n            {officials.length > 0 &&\n              CopyButton({\n                emailString: emailStringFromMap(),\n                officials: officials,\n              })}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col lg={8}>\n            {officials.length > 0 && (\n              <h5 className=\"mb-3\">\n                We found {officials.length}{' '}\n                {officials.length === 1 ? 'representative' : 'representatives'}{' '}\n                you can email.\n              </h5>\n            )}\n          </Col>\n        </Row>\n        <Row className=\"justify-content-md-center\">\n          <Col lg={8}>\n            {officials.length > 0 &&\n              OfficialsList({\n                officials: officials,\n                handleClick: handleClick,\n              })}\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport Alert from 'react-bootstrap/Alert';\nimport { DismissAlertCallback } from '../App';\n\ntype DismissableAlertProps = {\n  show: boolean;\n  handleClose: DismissAlertCallback;\n};\n\nexport default function DismissableAlert(props: DismissableAlertProps) {\n  if (props.show) {\n    return (\n      <Alert variant=\"danger\" onClose={props.handleClose} dismissible>\n        <Alert.Heading>Oh snap!</Alert.Heading>\n        <p>None of your representatives seem to be reachable by email.</p>\n      </Alert>\n    );\n  } else {\n    return;\n  }\n}\n","import React from 'react';\nimport Form from 'react-bootstrap/Form';\nimport FormControl from 'react-bootstrap/FormControl';\nimport Button from 'react-bootstrap/Button';\nimport { AddressLookupCallback, DismissAlertCallback } from '../App';\nimport Col from 'react-bootstrap/Col';\n\ntype AddressLookupProps = {\n  handleSubmit: AddressLookupCallback;\n  handleDismissAlert: DismissAlertCallback;\n  error: string;\n};\n\nexport default function AddressLookup(props: AddressLookupProps) {\n  const [input, setInput] = React.useState<string>('');\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setInput(evt.target.value);\n    props.handleDismissAlert();\n  };\n\n  const handleKeyDown = (evt: React.KeyboardEvent<HTMLInputElement>) => {\n    if (evt.key === 'Enter') {\n      evt.preventDefault();\n      props.handleSubmit(input);\n    }\n  };\n\n  return (\n    <Form.Group>\n      <Form.Row>\n        <Col md={9} className=\"mb-2\">\n          <FormControl\n            className={'input-group ' + (props.error && ' is-invalid')}\n            placeholder=\"Type or paste an address\"\n            aria-label=\"Address\"\n            aria-describedby=\"basic-addon2\"\n            onChange={handleChange}\n            onKeyDown={handleKeyDown}\n          ></FormControl>\n          {props.error && (\n            <Form.Control.Feedback type=\"invalid\">\n              {props.error}\n            </Form.Control.Feedback>\n          )}\n        </Col>\n        <Col md={3}>\n          <Button\n            block\n            variant=\"primary\"\n            onClick={() => {\n              props.handleSubmit(input);\n            }}\n          >\n            Get Emails\n          </Button>\n        </Col>\n      </Form.Row>\n    </Form.Group>\n  );\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport { OfficialInformation, emailStringFromArray } from '../App';\n\ntype CopyButtonProps = {\n  emailString: string;\n  officials: OfficialInformation[];\n};\n\nexport default function CopyButton(props: CopyButtonProps) {\n  function handleClick() {\n    let stringToCopy: string = '';\n    if (props.emailString.length > 0) {\n      stringToCopy = props.emailString;\n    } else {\n      props.officials.forEach((official: OfficialInformation) => {\n        stringToCopy += emailStringFromArray(official.emails) + ', ';\n      });\n    }\n    navigator.clipboard.writeText(stringToCopy);\n  }\n  return (\n    <Button variant=\"success\" block onClick={handleClick}>\n      {props.emailString.length > 0 ? 'Copy Selected' : 'Copy All'}\n    </Button>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}